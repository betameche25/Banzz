#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct {
    char name[50];
    int price;
} Item;


typedef struct {
    char name[50];
    int level;
    int experience;
    int hp;
    int max_hp;
    int attack;
    int base_attack;
    int defense;
    int base_defense;
    int evasion;
    int base_evasion;
    int accuracy;
    int base_accuracy;
    int speed;
    int supcoin;
    Item items[10];
} Supemon;

typedef struct {
    char name[50];
    Supemon *supemons[3];
    Supemon *selectedSupemon;
    int supcoin;
    Item items[10];
} Player;






// Fonctionnalités principales
void launchGame();
void outOfCombatActions(Player *player);
void battle(Player *player, Supemon *wildSupemon);
void chooseStarter(Player *player);
void intoTheWild(Player *player);
void selectMove(Player *player, Supemon *attacker, Supemon *defender);
void changeSupemon(Player *player);
void useItem(Player *player);
int runAway(Player *player, Supemon *wildSupemon);
int captureSupemon(Player *player, Supemon *wildSupemon);
void enemyTurn(Supemon *enemy, Supemon *playerSupemon);
int calculateExperienceReward(Supemon *enemySupemon);
int calculateSupcoinReward();
void shop(Player *player);
void displayItems();
void buyitem(Player *player, int choice);
void sellItem(Player *player, int choice);
void supemonCenter(Player *player);
void healSupemons(Player *player);
void leaveGame(Player *player);
void levelUp(Supemon *supemon);
void saveGame(Player *player);
void loadGame(Player *player);
void initializeSupemon(Supemon *supemon, const char *name, int level);
void displaySupemon(Supemon *supemon);
void (*moveFunctions[])(Supemon *attacker, Supemon *defender);



int main() {
    launchGame();

    // Test Supémon initialization and display
    Supemon supmander;
    initializeSupemon(&supmander, "Supmander", 1);
    displaySupemon(&supmander);

    Supemon supasaur;
    initializeSupemon(&supasaur, "Supasaur", 1);
    displaySupemon(&supasaur);

    Supemon supirtle;
    initializeSupemon(&supirtle, "Supirtle", 1);
    displaySupemon(&supirtle);

    // Test Supémon level up
    levelUp(&supmander);
    displaySupemon(&supmander);

    levelUp(&supasaur);
    displaySupemon(&supasaur);

    levelUp(&supirtle);
    displaySupemon(&supirtle);

    // Test battle and move selection
    Player player;
    strcpy(player.name, "Ash");

    chooseStarter(&player);
    outOfCombatActions(&player);

    // Initialisez le joueur et ses objets ici
    displayItems(&player);

    return 0;

    return 0;
}

void launchGame() {
    printf("Welcome to the Supémon Game!\n");

    // Implement player setup (name, Supémon, etc.)
    Player player;
    printf("Enter your name: ");
    scanf("%s", player.name);

    chooseStarter(&player);

    outOfCombatActions(&player);
}

void chooseStarter(Player *player) {
    int choice;

    printf("Choose your starter Pokémon:\n");
    printf("1. Salamèche\n");
    printf("2. Carapuce\n");
    printf("3. Bulbisar\n");

    do {
        printf("Enter your choice (1-3): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                initializeSupemon(&player->supemons[0], "Salamèche", 1);
                player->selectedSupemon = player->supemons[0];
                break;
            case 2:
                initializeSupemon(&player->supemons[0], "Carapuce", 1);
                player->selectedSupemon = player->supemons[0];
                break;
            case 3:
                initializeSupemon(&player->supemons[0], "Bulbisar", 1);
                player->selectedSupemon = player->supemons[0];
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice < 1 || choice > 3);
}

void outOfCombatActions(Player *player) {
    int choice;

    do {
        printf("\nOut-of-combat Actions:\n");
        printf("1. Into the Wild\n");
        printf("2. Shop\n");
        printf("3. Supémon Center\n");
        printf("4. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                intoTheWild(player);
                break;
            case 2:
                shop(player);
                break;
            case 3:
                supemonCenter(player);
                break;
            case 4:
                // Implement save and exit functionality
                leaveGame(player);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);
}

void intoTheWild(Player *player) {
    // Generate a random wild Supémon for the battle
    Supemon wildSupemon;

    // Initialize wildSupemon's attributes (level, stats, etc.)
    wildSupemon.level = player->selectedSupemon->level;

    // Start the battle
    battle(player, &wildSupemon);
}

void displayMoveOptions(Supemon *supemon) {
    printf("Moves:\n");
    printf("1. Scratch\n");
    printf("2. Grawl\n");
    printf("3. Pound\n");
    printf("4. Foliage\n");
    printf("5. Shell\n");
}

void selectMove(Player *player, Supemon *attacker, Supemon *defender) {
    int choice;

    // Afficher les options de mouvement
    displayMoveOptions(attacker);

    do {
        // Demander au joueur de choisir un mouvement
        printf("Select a move (1-5): ");
        scanf("%d", &choice);

        if (choice < 1 || choice > 5) {
            printf("Invalid choice. Please try again.\n");
        }
    } while (choice < 1 || choice > 5);

    // Exécuter le mouvement sélectionné
    moveFunctions[choice - 1](attacker, defender);
}

void displayBattleStatus(Supemon *playerSupemon, Supemon *enemySupemon) {
    printf("Joueur - %s | PV: %d/%d\n", playerSupemon->name, playerSupemon->hp, playerSupemon->max_hp);
    printf("Adversaire - %s | PV: %d/%d\n", enemySupemon->name, enemySupemon->hp, enemySupemon->max_hp);
}

void battle(Player *player, Supemon *wildSupemon) {
    // (Initialisation du combat)

    while (wildSupemon->hp > 0 && player->selectedSupemon->hp > 0) {
        // Afficher l'état du combat
        displayBattleStatus(&player->selectedSupemon, wildSupemon);

        // Tour du joueur
        printf("\nTour du Joueur :\n");
        selectMove(player, player->selectedSupemon, wildSupemon);

        // Vérifier si le combat est terminé
        if (wildSupemon->hp <= 0) {
            // Le joueur gagne
            int supcoinReward = calculateSupcoinReward();
            int experienceReward = calculateExperienceReward(wildSupemon);
            printf("Vous avez vaincu le Supémon sauvage !\n");
            printf("Vous avez gagné %d Supcoins et %d points d'expérience.\n", supcoinReward, experienceReward);

            // Mettre à jour les attributs du joueur (Supcoins et expérience du Supémon)
            player->supcoin += supcoinReward;
            player->selectedSupemon->experience += experienceReward;

            // Augmenter les PV après la victoire
            player->selectedSupemon->max_hp += 5;
            player->selectedSupemon->hp = player->selectedSupemon->max_hp;

            // Aller au centre Pokémon pour soigner le Supémon
            supemonCenter(player);

            // Sortir de la boucle de combat
            break;
        }

        // Tour de l'ennemi
        printf("\nTour de l'Ennemi :\n");
        enemyTurn(wildSupemon, player->selectedSupemon);

        // Vérifier si le combat est terminé
        if (player->selectedSupemon->hp <= 0) {
            // Le joueur perd
            printf("Votre Supémon a perdu connaissance. Vous avez perdu le combat.\n");

            // Aller au centre Pokémon pour soigner le Supémon
            supemonCenter(player);

            // Sortir de la boucle de combat
            break;
        }
    }
}



void scratch(Supemon *attacker, Supemon *defender);
void grawl(Supemon *attacker, Supemon *defender);
void pound(Supemon *attacker, Supemon *defender);
void foliage(Supemon *attacker, Supemon *defender);
void shell(Supemon *attacker, Supemon *defender);

void scratch(Supemon *attacker, Supemon *defender) {
    int damage = (attacker->attack * 2) - defender->defense;
    damage = (damage < 0) ? 0 : damage; // Assure que les dégâts ne sont pas négatifs

    printf("%s utilise Scratch !\n", attacker->name);
    printf("Il inflige %d dégâts à %s.\n", damage, defender->name);

    defender->hp -= damage;
}

void grawl(Supemon *attacker, Supemon *defender) {
    int defenseReduction = attacker->attack / 2;

    printf("%s utilise Grawl !\n", attacker->name);
    printf("Il diminue la défense de %s.\n", defender->name);

    // Réduction de la défense de l'adversaire
    defender->defense -= defenseReduction;
}

void pound(Supemon *attacker, Supemon *defender) {
    int damage = (attacker->attack * 3) - defender->defense;
    damage = (damage < 0) ? 0 : damage;

    printf("%s utilise Pound !\n", attacker->name);
    printf("Il inflige %d dégâts à %s.\n", damage, defender->name);

    defender->hp -= damage;
}

void foliage(Supemon *attacker, Supemon *defender) {
    int damage = (attacker->attack * 4) - defender->defense;
    damage = (damage < 0) ? 0 : damage;

    printf("%s utilise Foliage !\n", attacker->name);
    printf("Il inflige %d dégâts à %s.\n", damage, defender->name);

    defender->hp -= damage;
}

void shield(Supemon *attacker, Supemon *defender) {
    int damageReduction = attacker->defense / 2;

    printf("%s utilise Shield !\n", attacker->name);
    printf("Il réduit les dégâts reçus pendant ce tour.\n");

    // Réduction des dégâts reçus par l'attaquant
    defender->defense -= damageReduction;
}

void (*moveFunctions[])(Supemon *attacker, Supemon *defender) = {
    scratch,
    grawl,
    pound,
    foliage,
    shell
};

// Function to initialize a Supémon with level 1 statistics
void initializeSupemon(Supemon *supemon, const char *name, int level) {
    strcpy(supemon->name, name);
    supemon->level = level;
    supemon->experience = 0;
    supemon->max_hp = calculateInitialHP(level);
    supemon->hp = supemon->max_hp;
    supemon->base_attack = 1;
    supemon->attack = supemon->base_attack;
    supemon->base_defense = 1;
    supemon->defense = supemon->base_defense;
    supemon->base_evasion = 1;
    supemon->evasion = supemon->base_evasion;
    supemon->base_accuracy = 2;
    supemon->accuracy = supemon->base_accuracy;
    supemon->speed = 1 + (level - 1) / 2; // Speed increases every 2 levels
    // Add other statistics and moves initialization
}
int calculateInitialHP(int level) {
    return level * 10;
}

void displaySupemon(Supemon *supemon) {
    printf("Name: %s\n", supemon->name);
    printf("Level: %d\n", supemon->level);
    printf("Experience: %d\n", supemon->experience);
    printf("HP: %d/%d\n", supemon->hp, supemon->max_hp);
    printf("Attack: %d\n", supemon->attack);
    printf("Defense: %d\n", supemon->defense);
    printf("Evasion: %d\n", supemon->evasion);
    printf("Accuracy: %d\n", supemon->accuracy);
    printf("Speed: %d\n", supemon->speed);
    // Add other statistics and moves display
}

// Function to level up a Supémon
void levelUp(Supemon *supemon) {
    // Increase all statistics by 30%
    supemon->max_hp = supemon->max_hp * 1.3;
    supemon->attack = supemon->attack * 1.3;
    supemon->defense = supemon->defense * 1.3;
    supemon->evasion = supemon->evasion * 1.3;
    supemon->accuracy = supemon->accuracy * 1.3;
    supemon->speed += 1;
    supemon->max_hp = (int)(supemon->max_hp + 0.5);
    supemon->attack = (int)(supemon->attack + 0.5);
    supemon->defense = (int)(supemon->defense + 0.5);
    supemon->evasion = (int)(supemon->evasion + 0.5);
    supemon->accuracy = (int)(supemon->accuracy + 0.5);
}


void changeSupemon(Player *player) {

    printf("Select a Supémon to switch to:\n");

}

void useItem(Player *player) {

    printf("Select an item to use:\n");

}

int runAway(Player *player, Supemon *wildSupemon) {

}

int captureSupemon(Player *player, Supemon *wildSupemon) {

}

void enemyTurn(Supemon *enemy, Supemon *playerSupemon) {

}

int calculateExperienceReward(Supemon *enemySupemon) {

}

int calculateSupcoinReward() {

}






void displayItems(Player *player) {
    // Display player's items
    printf("Player Items:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d. %s - %d Supcoins\n", i + 1, player->items[i].name, player->items[i].price);
    }
    printf("\nShop Items:\n");
    printf("1. Potion (+5 HP) - 100 Supcoins\n");
    printf("2. Super Potion (+10 HP) - 300 Supcoins\n");
    printf("3. Rare Candy (Adds a level) - 700 Supcoins\n");
}


void buyitem(Player *player, int choice) {
    int itemChoice;

    // Afficher les objets disponibles à l'achat
    displayItems(player);

    // Demander au joueur de choisir l'objet à acheter
    printf("Enter the number of the item you want to buy: ");
    scanf("%d", &itemChoice);

    // Vérifier si le choix d'objet est valide
    if (itemChoice >= 1 && itemChoice <= 3) {
        // Déterminer le coût d'achat en fonction du choix d'objet
        int itemCost;
        const char *itemName;
        int itemEffect;

        switch (itemChoice) {
            case 1:
                itemName = "Potion";
                itemEffect = 5;
                itemCost = 100;
                break;
            case 2:
                itemName = "Super Potion";
                itemEffect = 10;
                itemCost = 300;
                break;
            case 3:
                itemName = "Rare Candy";
                itemEffect = 1;  // Adding a level
                itemCost = 700;
                break;
        }

        // Vérifier si le joueur a suffisamment de Supcoins pour acheter l'objet
        if (player->supcoin >= itemCost) {
            // Mettre à jour les attributs du joueur après l'achat
            player->supcoin -= itemCost;


            switch (itemChoice) {
                case 1:

                    break;
                case 2:

                    break;
                case 3:

                    break;
            }

            printf("Purchase successful!\n");
        } else {
            printf("Insufficient Supcoins to buy this item.\n");
        }
    } else {
        printf("Invalid item choice.\n");
    }
}



void sellItem(Player *player, int choice) {

    int itemChoice;
    displayItems(player);
    printf("Enter the number of the item you want to sell: ");
    scanf("%d", &itemChoice);

    if (itemChoice >= 1 && itemChoice <= 10) {

    } else {
        printf("Invalid item choice.\n");
    }
}

void shop(Player *player) {
    int choice;

    do {
        printf("\nShop:\n");
        printf("1. Buy Items\n");
        printf("2. Sell Items\n");
        printf("3. Exit Shop\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                displayItems(player);
                buyitem(player);
                break;
            case 2:
                sellItem(player);
                break;
            case 3:
                printf("Exiting the Shop.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 3);
}


void supemonCenter(Player *player) {
    // Implement Supémon Center functionality
    printf("Welcome to the Supémon Center! Healing your Supémons...\n");
    // Implement Supémon healing logic
    healSupemons(player);
    printf("All Supémons healed!\n");
}

void healSupemons(Player *player) {
    // Implementer la logique de soin des Supémons
    for (int i = 0; i < 3; i++) {
        player->supemons[i]->hp = player->supemons[i]->max_hp;
    }
}


void leaveGame(Player *player) {
    printf("Do you want to save progress before leaving? (1 for Yes, 0 for No): ");
    int saveChoice;
    scanf("%d", &saveChoice);

    if (saveChoice) {
        printf("Progress saved. Exiting the game.\n");
    } else {
        printf("Exiting the game without saving.\n");
    }

    // Quitter le programme avec succès
    exit(0);
}

void saveGame(Player *player) {
    // Nom du fichier de sauvegarde
    const char *filename = "save_game.txt";

    // Ouverture du fichier en mode écriture
    FILE *file = fopen(filename, "w");

    // Vérification si le fichier est ouvert avec succès
    if (file == NULL) {
        printf("Erreur lors de l'ouverture du fichier de sauvegarde.\n");
        return;
    }

    // Écriture des données du joueur dans le fichier
    fprintf(file, "Nom du joueur : %s\n", player->name);

    // Boucle pour écrire les données de chaque Supémon
    for (int i = 0; i < 3; i++) {
        fprintf(file, "\nSupémon %d :\n", i + 1);
        fprintf(file, "Nom : %s\n", player->supemons[i].name);
        fprintf(file, "Niveau : %d\n", player->supemons[i].level);
        // Ajoutez d'autres données/statistiques du Supémon ici
    }

    // Écriture des objets du joueur
    fprintf(file, "\nObjets du joueur :\n");
    for (int i = 0; i < 10; i++) {
        fprintf(file, "%s - %d Supcoins\n", player->items[i].name, player->items[i].price);
    }

    // Écriture des Supcoins du joueur
    fprintf(file, "\nSupcoins : %d\n", player->supcoin);

    // Fermeture du fichier
    fclose(file);

    printf("Sauvegarde réussie dans %s.\n", filename);
}
